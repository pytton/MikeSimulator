OBJECTIVES:

1. Make classes reusable - Control class will be unique - the rest - try to make them reusable.
2. Create a simulator for trading a single instrument.
3. Make it so that price can be either changed by user at will,
fed from live market data, or fed fromm historical data.
4. Make manual trading possible.
5. Make algo trading possible.
6. Make it simple to develop and test algos after initial code is written.

Currently working on:

6/4/2016
in Control.h and Control.cpp - switched UserInterface * userInterface
for ManualInterface * userInterface. This needs to be looked through and finished


MikeOrderbook - how do I want to do this?12

Move slider and up/down buttons as well as mostly everything
out of UserInterface into a separate window. possibly window2.
or create new one in FLUID.
have WidgetTable have its very own window.




TODO:

1.Move callback function details from UserInterface and WidgetTable to Control.
Have UserInterface and WidgetTable call an appropriate function in the Control
class and have the control class handle all the details of what the function
does.

2.FirstIBAPI - create a new project based on the old one.
Move all the necessary files to one or two folders.
Clean up the mess that the current solution is.

3. Attach FirstIBAPI to MikeSimulator and add two buttons to MikeSimulator:
	one to connect to IB API
	second to pull and display in console bid/ask of SPY.

5. Move slider and up/down controls from UserInterface to separate window.
UserInterface to be used in conjunction with WidgetTable only.


DONE:

moving callback from WidgetTable to Control. - DONE
change callback so that WidgetTable passes some data to Control: - DONE
void UserInterface::rePriceWidTable(Fl_Widget *w, void*p) has to be moved from 
UserInterface to Control - DONE

4.Change UserInterface so that it is created from Control class instead of
mikeSimulator. Create a new constructor taking Data and Control pointers instead
of mikesimulator pointers. - DONE

this->MainLoop(); inside void Control::m_up_btn_cb(UserInterface * p) is throwing an unhandled exception;
problem was in void Control::printCurrentAll() - fixed now - DONE
Continue by refactoring refactored_m_slider1_cb in UserInterface - DONE
moving void UserInterface::m_down_btn_cb(Fl_Widget *w, void * p) to Control. - DONE
add Control class pointer to UserInterface constructor. - DONE
